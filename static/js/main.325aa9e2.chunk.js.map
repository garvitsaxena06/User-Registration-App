{"version":3,"sources":["assets/img/profile.png","config/firebase.js","components/Home.js","components/Login.js","components/VerifyEmail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fireDB","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","Home","props","handleChange","e","target","files","image","setState","handleUpload","state","ref","name","put","on","snapshot","progress","Math","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","url","auth","currentUser","updateProfile","photoURL","catch","window","location","reload","err","isLoading","className","this","value","style","width","max","src","profile","height","alt","displayName","emailVerified","color","fontFamily","type","onChange","onClick","logout","delete","Component","Login","uiConfig","firebaseAuth","VerifyEmail","email","sendEmailVerification","App","isSignedIn","signInFlow","credentialHelper","firebaseui","CredentialHelper","NONE","signInOptions","provider","EmailAuthProvider","PROVIDER_ID","GoogleAuthProvider","GithubAuthProvider","callbacks","signInSuccess","componentDidMount","onAuthStateChanged","user","signOut","confirm","alert","Fragment","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.325aa9e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.2c6e94aa.png\";","import * as firebase from \"firebase\";\r\nimport \"firebase/storage\"\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCLNjYa-umOtWuy1YVAg6MHJVv5TJ1HYmc\",\r\n    authDomain: \"fir-auth-501f0.firebaseapp.com\",\r\n    databaseURL: \"https://fir-auth-501f0.firebaseio.com\",\r\n    projectId: \"fir-auth-501f0\",\r\n    storageBucket: \"fir-auth-501f0.appspot.com\",\r\n    messagingSenderId: \"213768066650\",\r\n    appId: \"1:213768066650:web:76d5b0a2d0fb165db1aa63\",\r\n    measurementId: \"G-J5K92365P9\"\r\n};\r\n  // Initialize Firebase\r\nvar fireDB = firebase.initializeApp(firebaseConfig);\r\nconst storage = firebase.storage()\r\n\r\nexport {\r\n  storage, fireDB as default\r\n}","import React, { Component } from 'react'\r\nimport profile from \"../assets/img/profile.png\";\r\nimport { storage } from \"../config/firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isLoading: true,\r\n            image: null,\r\n            url: '',\r\n            progress: 0\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        if(e.target.files[0]) {\r\n          const image = e.target.files[0]\r\n          this.setState({\r\n            image: image\r\n          })\r\n        }\r\n      }\r\n    \r\n    handleUpload = () => {\r\n        try {\r\n            const image = this.state.image\r\n            const uploadTask = storage.ref(`profile-pictures/${image.name}`).put(image)\r\n            uploadTask.on('state_changed', \r\n            (snapshot) => {\r\n                const progress = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100)\r\n                this.setState({\r\n                    progress\r\n                })\r\n            },\r\n            (error) => {\r\n            console.log(error)\r\n            },\r\n            () => {\r\n            storage.ref('profile-pictures').child(image.name).getDownloadURL().then(url => {\r\n                this.setState({\r\n                    url: url\r\n                })\r\n                var user = firebase.auth().currentUser;\r\n                user.updateProfile({\r\n                    photoURL: this.state.url\r\n                })\r\n                .then(() => {\r\n                    console.log(\"Update successfully!\", this.state.url)\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                });\r\n                window.location.reload()\r\n            })\r\n            })\r\n        }\r\n        catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"bg-profile\">\r\n                <div className=\"container bg-content\">\r\n                    {\r\n                        this.state.progress===0 ? '' : (\r\n                            <div className=\"row\">\r\n                            {console.log(\"uploading\")}\r\n                                <div className=\"col-md-12\">\r\n                                    <progress value={this.state.progress} style={{width: \"100%\"}} max=\"100\" />\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3 mt-5\">\r\n                            <img src={this.props.fireDB.auth().currentUser.photoURL || profile } style={{width: \"200px\", height:\"200px\"}} alt=\"profile\"/>\r\n                        </div>\r\n                        <div className=\"col-md-9 display-name\">\r\n                            <h1>Welcome <br/>{this.props.fireDB.auth().currentUser.displayName}</h1>\r\n                            {\r\n                                this.props.fireDB.auth().currentUser.emailVerified ?\r\n                                <span><i className=\"fa fa-check-circle\" style={{color: \"green\"}}><code style={{color: \"#000\", fontFamily: \"'Roboto', sans-serif\"}}>Verified Account</code></i></span>\r\n                                : \r\n                                <span><i className=\"fa fa-times\" style={{color: \"red\"}}><text style={{color: \"#000\", fontFamily: \"'Roboto', sans-serif\"}}>Not Verified Account</text></i></span>\r\n                            }\r\n                        </div>\r\n                    </div><br/>\r\n                    {\r\n                        !this.props.fireDB.auth().currentUser.photoURL ? (\r\n                            <div className=\"row d-flex\">\r\n                            <div className=\"col-md-3\">\r\n                                <input type=\"file\" onChange={this.handleChange}/>\r\n                            </div>\r\n                            <div className=\"ml-auto\">\r\n                                <button className=\"btn btn-outline-primary\" onClick={this.handleUpload}>Upload Profile Photo</button>\r\n                            </div>\r\n                        </div>\r\n                        ) :\r\n                        ''\r\n                    }\r\n                    <br/>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <button className=\"btn btn-outline-success\" onClick={this.props.logout}>Sign Out</button><br/><br/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <button className=\"btn btn-outline-danger\" onClick={this.props.delete}>Delete Account</button><br/>  \r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home\r\n","import React, { Component } from 'react'\r\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isLoading: true\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"bg-img\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4 offset-md-4 panel\">\r\n                        <StyledFirebaseAuth uiConfig={this.props.uiConfig} firebaseAuth={this.props.fireDB.auth()}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login\r\n","import React, { Component } from 'react'\r\n\r\nclass VerifyEmail extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isLoading: true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"bg-img\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4 offset-md-4 panel\">\r\n                        <div className=\"card d-flex mx-auto\" style={{width: \"18rem\"}}>\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">Sign-in email verification</h5><br/>\r\n                            <p className=\"card-text\">A sign-in email with additional instructions will be \r\n                            sent to <b>{this.props.fireDB.auth().currentUser.email}</b>. Verify your email to complete sign-in.</p><br/>\r\n                            <div className=\"d-flex\">\r\n                            <div className=\"p-2\"><button className=\"back-btn\" onClick={this.props.logout}>BACK</button></div>\r\n                            <div className=\"ml-auto p-2\"><button className=\"verify-btn\" onClick={this.props.sendEmailVerification}>VERIFY</button></div>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VerifyEmail","import React, { Component } from 'react'\r\nimport firebase from \"firebase\";\r\nimport fireDB from \"./config/firebase\";\r\nimport * as firebaseui from 'firebaseui'\r\nimport Home from \"./components/Home\";\r\nimport Login from \"./components/Login\";\r\nimport VerifyEmail from \"./components/VerifyEmail\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isSignedIn: false\r\n  }\r\n\r\n  uiConfig = {\r\n    signInFlow: \"popup\", \r\n    credentialHelper: firebaseui.auth.CredentialHelper.NONE,\r\n    signInOptions: [\r\n      {\r\n        provider: firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n      },\r\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n      firebase.auth.GithubAuthProvider.PROVIDER_ID,\r\n    ],\r\n    callbacks: {\r\n      signInSuccess: () => console.log(\"Signed In!\")\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    fireDB.auth().onAuthStateChanged(user => {\r\n        this.setState({\r\n          isSignedIn: !!user\r\n        })\r\n    })\r\n  }\r\n\r\n  logout = () => {\r\n    fireDB.auth().signOut()\r\n  }\r\n\r\n  delete = () => {\r\n    if(window.confirm(\"Are you sure to delete this account?\"))\r\n    fireDB.auth().currentUser.delete()\r\n    .then(() => {\r\n      console.log(\"Account deleted\")\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n      alert(\"This operation is sensitive and requires recent authentication. Log in again before retrying this request.\")\r\n      fireDB.auth().signOut()\r\n    })\r\n  }\r\n\r\n  sendEmailVerification = () => {\r\n    fireDB.auth().currentUser.sendEmailVerification()\r\n    fireDB.auth().signOut()\r\n    alert('Email Verification link has been sent!')\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {\r\n          this.state.isSignedIn \r\n          ?\r\n            fireDB.auth().currentUser.emailVerified ? \r\n              <Home fireDB={fireDB} logout={this.logout} delete={this.delete} /> : \r\n              <VerifyEmail fireDB={fireDB} logout={this.logout} sendEmailVerification={this.sendEmailVerification} />\r\n          : \r\n          <Login fireDB={fireDB} uiConfig={this.uiConfig} />\r\n        }\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}